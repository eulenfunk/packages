#!/bin/sh
echo -n "### IP :  "
ifconfig |head|tail -n1
ip r s t all
echo    "### from ssh : "$SSH_CONNECTION
echo -n "### uptime :  "
uptime
[ -f /etc/init.d/fastd ] && (echo -n "### pubkey :  ";/etc/init.d/fastd show_key mesh_vpn)
[ -f /etc/init.d/tunneldigger ] && (echo -n "### tunneldigger :  ";ps|grep tunneldigger|head -1|cut -c 27-)
echo -n "time='"$(date '+%A %d/%m/%Y %H:%M:%S')"'"
[ -f /sys/class/net/bat0/mesh/hop_penalty ] && echo -n " - HopPenalty='$(cat /sys/class/net/bat0/mesh/hop_penalty|tr -d "\n")'"
echo " - uptime='$(uptime|sed -e 's/^\ //1' -e 's/\ \ //g')'"
batctl gwl
export imagename=$(lua -e 'print(require("platform_info").get_image_name())')
export MoLoff=$(uci show|grep network.mesh_lan.disabled|cut -d"=" -f2)
export MoWoff=$(uci show|grep network.mesh_wan.disabled|cut -d"=" -f2)
export ifMoL=$(uci show|grep network.mesh_lan.ifname|cut -d"=" -f2)
export ifWAN=$(uci show|grep network.wan.ifname|cut -d"=" -f2)
export ifCLI=$(uci show|grep network.client.ifname|cut -d"=" -f2)
export lanCLI=\'$(echo $ifCLI|sed -r 's/.*(eth[0-9.]{1,3}).*/\1/g'|grep eth)\'
export batgw=$(batctl gwl|grep ^*|cut -d"[" -f2|cut -d"]" -f1)
echo firmware=\'$(cat /lib/gluon/release)\'-\'$(cat /lib/gluon/gluon-version)\' autoupdater=$(uci show|grep autoupdater.settings.enabled|cut -d"=" -f2) branch=$(uci show|grep autoupdater.settings.branch|cut -d"=" -f2)
echo vpn=$VPNon:$(uci show|grep tunneldigger.mesh_vpn.enabled|cut -d"=" -f2|sed -e "s/'1'/l2tp/"|sed -e "s/'0'/l2tp_off/") $(uci show|grep fastd.mesh_vpn.enabled|cut -d"=" -f2|sed -e "s/'1'/fastd/"|sed -e "s/'0'/fastd_off/") $(uci show|grep simple-tc.mesh_vpn.enabled|cut -d"=" -f2|sed -e "s/'1'/\*BW-LIMITED!\*/"|sed -e "s/'0'//") - imagename=\'$imagename\' $([ $(head -c 4 /tmp/sysinfo/model)  = 'TP-L' ] &&(. /lib/ar71xx.sh ;. /lib/functions.sh ; echo \ HWID=\'$(tplink_get_hwid)\')) - $(df|grep "overlayfs"|awk '{print "overlayfs="$4"kB free, "$5" used"}')
for r in 0 1 2; do uci show|grep wireless.radio$r>/dev/null && (echo -n w$(uci show|grep wireless.radio$r.disabled|cut -d"=" -f2)|sed -e "s/w'1'/Radio$1.OFF/"|sed -e "s/w'0'/Radio$r.ON/"|sed -e "s/w/Radio$r.ON/";echo \ r$r.ch=$(uci show|grep radio$r.channel|cut -d"=" -f2) r$r.mode=$(uci show|grep wireless.radio$r.htmode|cut -d"=" -f2) r$r.tx=\'$(iwinfo radio$r txpowerlist|grep "^*"|cut -d" " -f2)\' r$r.wifimesh-off=$(uci show|grep wireless.mesh_radio$r.disabled|cut -d"=" -f2) r$r.ap-off=$(uci show|grep wireless.client_radio$r.disabled|cut -d"=" -f2)); done
export VPNon="'0'"
[ "$(uci show|grep gluon.mesh_vpn.enabled|cut -d"=" -f2)" == "'1'" ] && export VPNon="'1'"
[ "$(uci show|grep tunneldigger.mesh_vpn.enabled|cut -d"=" -f2)" == "'1'" ] &&  export VPNon="'1'"
echo -n "MoW.off=$MoWoff MoL.off=$MoLoff "
[ "$MoLoff" == "'0'" ] && echo -n "MoL=$ifMoL "
echo WAN=$ifWAN LANCLI=$lanCLI CLI=$ifCLI
echo switch0: $(swconfig dev switch0 show | grep 'link:'|sed -e 's/link://g' -e 's/port:/p/g' -e 's/speed://g' -e 's/baseT//g' -e 's/ full-duplex/fdx/g' -e 's/ half-duplex/hdx/g' -e 's/flow/f/g' -e 's/\t//g' -e 's/$/;/g' -e 's/ ;/;/g')
([ "$VPNon" == "'1'" ] && [ "$MoWoff" == "'0'" ]) && echo ALARM! MoW-VPN-Konflikt?
([ "$MoLoff" == "'0'" ] && [ "$ifCLI" == "$ifLAN" ]) && echo ALARM! MoL-CLI-Konflikt?
([ "$VPNon" == "'1'" ] && [ ! $(echo "$batgw"|grep -i vpn) ]) && echo WARNING: VPN enabled, aber nicht verbunden?
iwinfo
echo -n "### connected to this node  :  "
batctl tl |grep W |wc -l
echo -n "### number of total clients :    "
batctl tg |grep W |wc -l
echo -n "### Location: Geo?:$(uci show|grep .share_location=|cut -d= -f2)"
echo -n " lon:$(uci show|grep .longitude=|cut -d= -f2)"
echo -n " lat:$(uci show|grep .latitude=|cut -d= -f2)"
echo -n " Contact:$(uci show|grep contact|cut -d= -f2)"
echo .
